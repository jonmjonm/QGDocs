[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantifying Gerrymandering Documentation",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "geographic.html",
    "href": "geographic.html",
    "title": "Geographic Files",
    "section": "",
    "text": "These are the basic formate used to hold the Adjacency file or dual graph for a region to be redistricted. It is based on the JSON output of the NetworkX Python library. An example for a 4x4 grid here grid_graph_4_by_4.json.\nSuch a file contains list of the nodes/vertices as a list under node. A sample node entry is\n    {\n        \"node_name\": \"(0,0)\",\n        \"id\": 0,\n        \"border_length\": 2,\n        \"x_location\": 0,\n        \"y_location\": 0,\n        \"area\": 1,\n        \"population\": 1,\n        \"county\": \"A\"\n    }\nwhere the id, area, population and border_length are required. They give the name by which the vertex/node are referred to as well as the area and population of the partition unit associated to the vertex/node. border_length entry give the length of the external boundary of the partition unit associated to the vertex/node. Hence of a vertex/node is interior this number is zero. The precise labels can be different than these as the name mapping to each piece of data can be specified at runtime.\nOne can also encode additional information. This example gives a node name in node_name, a location in the plane to help with plotting in x_location and y_location. It also records which county the node is in. This example uses fictitious county names of “A” and “B”. Additionally, the vote count for each party in a collection of elections is also often included.\nAfter the list of noted, there is an adjacency entry which contains one list for each of the vertices/nodes. The first list under adjacency gives the vertices/nodes that are adjacent to the first vertex/node listed above.\nFor example of the second entry in the adjacency list is the following list, then the 2nd note is adjacent to the 4th and 5th node listed with a boundary whose length is respectively one and two units.\n{\n    {\n    \"id\": 4,\n    \"length\": 1\n    },\n    {\n    \"id\": 5,\n    \"length\": 2\n    }\n}\n\n\n\nCollection of Sample Adjacency Files\n\n\n\n\n\n\n\nDescription\nFile Name\nComments\n\n\n\n\n4x4 Rectangular Grid\ngrid_graph_4_by_4.json\nSimple regular graph. All nodes have area and population 1.\n\n\n8x8 Rectangular Grid\ngrid_graph_8_by_8.json\n12\n\n\n10x10 Rectangular Grid\ngrid_graph_10_by_10.json\n123\n\n\n10x10 Hexagonal Grid\nhex_graph_10_by_10.json\n1\n\n\nConnecticut Adjacency Graph\nCT_pct20.json",
    "crumbs": [
      "Home",
      "Geographic Files"
    ]
  },
  {
    "objectID": "geographic.html#json-adjacency-files",
    "href": "geographic.html#json-adjacency-files",
    "title": "Geographic Files",
    "section": "",
    "text": "These are the basic formate used to hold the Adjacency file or dual graph for a region to be redistricted. It is based on the JSON output of the NetworkX Python library. An example for a 4x4 grid here grid_graph_4_by_4.json.\nSuch a file contains list of the nodes/vertices as a list under node. A sample node entry is\n    {\n        \"node_name\": \"(0,0)\",\n        \"id\": 0,\n        \"border_length\": 2,\n        \"x_location\": 0,\n        \"y_location\": 0,\n        \"area\": 1,\n        \"population\": 1,\n        \"county\": \"A\"\n    }\nwhere the id, area, population and border_length are required. They give the name by which the vertex/node are referred to as well as the area and population of the partition unit associated to the vertex/node. border_length entry give the length of the external boundary of the partition unit associated to the vertex/node. Hence of a vertex/node is interior this number is zero. The precise labels can be different than these as the name mapping to each piece of data can be specified at runtime.\nOne can also encode additional information. This example gives a node name in node_name, a location in the plane to help with plotting in x_location and y_location. It also records which county the node is in. This example uses fictitious county names of “A” and “B”. Additionally, the vote count for each party in a collection of elections is also often included.\nAfter the list of noted, there is an adjacency entry which contains one list for each of the vertices/nodes. The first list under adjacency gives the vertices/nodes that are adjacent to the first vertex/node listed above.\nFor example of the second entry in the adjacency list is the following list, then the 2nd note is adjacent to the 4th and 5th node listed with a boundary whose length is respectively one and two units.\n{\n    {\n    \"id\": 4,\n    \"length\": 1\n    },\n    {\n    \"id\": 5,\n    \"length\": 2\n    }\n}\n\n\n\nCollection of Sample Adjacency Files\n\n\n\n\n\n\n\nDescription\nFile Name\nComments\n\n\n\n\n4x4 Rectangular Grid\ngrid_graph_4_by_4.json\nSimple regular graph. All nodes have area and population 1.\n\n\n8x8 Rectangular Grid\ngrid_graph_8_by_8.json\n12\n\n\n10x10 Rectangular Grid\ngrid_graph_10_by_10.json\n123\n\n\n10x10 Hexagonal Grid\nhex_graph_10_by_10.json\n1\n\n\nConnecticut Adjacency Graph\nCT_pct20.json",
    "crumbs": [
      "Home",
      "Geographic Files"
    ]
  },
  {
    "objectID": "geographic.html#shapefiles",
    "href": "geographic.html#shapefiles",
    "title": "Geographic Files",
    "section": "Shapefiles",
    "text": "Shapefiles",
    "crumbs": [
      "Home",
      "Geographic Files"
    ]
  },
  {
    "objectID": "geographic.html#geojson",
    "href": "geographic.html#geojson",
    "title": "Geographic Files",
    "section": "GeoJSON",
    "text": "GeoJSON",
    "crumbs": [
      "Home",
      "Geographic Files"
    ]
  }
]